class Solution {
public:
    int numWays(int n) {
        if(n==0)return 1;
        if(n==1)return 1;
        int p=1, q=1, res=2;
        for (int i=2; i<n; i++){
            p = q;
            q = res;
            res = (p + q) % 1000000007;
       }
       return res;
    }
};

#######################################
1. f(0)=1, f(1)=1
2. 循环条件i=2; i<n
3. p=1, q=1, res=2;
#######################################
class Solution {
public:

    vector<vector<long>> matmul(vector<vector<long>>& a, vector<vector<long>>& b){
        int m=a.size(), n=b[0].size(), l=a[0].size();
        vector<vector<long>> res(m, vector<long>(n, 0));
        for (int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                for (int k=0; k<l; k++){
                    res[i][j] = (res[i][j] + a[i][k] * b[k][j])%1000000007;
                }
            }
        }
        return res;
    }

    vector<vector<long>> pow(vector<vector<long>>& a, int n){
        vector<vector<long>> res{{1, 0}, {0, 1}};
        while(n>0){
            if(n&1) res = matmul(a, res);
            n >>= 1;
            a = matmul(a, a);
        }
        return res;
        
    }

    int numWays(int n) {
        if(n==0)return 1;
        if(n==1)return 1;
        vector<vector<long>> q{{1, 1}, {1, 0}};
        vector<vector<long>> res = pow(q, n-1);
        return (res[0][0] + res[0][1])%1000000007;
    }
};


####################################################################
1. 最后结果是两个数之和 也需要取余
2. 因为初值不同所以最后结果是幂矩阵中的两个数之和
