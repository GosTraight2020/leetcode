class Solution {
public:
    int fib(int n) {
        if(n<2) return n;
        int tmp1=0, tmp2=0, res=1;
        for(int i=2;i<=n;i++){
            tmp1=tmp2;
            tmp2=res;
            res=(tmp1+tmp2) % 1000000007;
        }
        return res;
    }
};

##################################################
1 初始化 0 0 1 res放在最后
2 循环值 i=2 i<=n



##################################################
class Solution {
public:
    vector<vector<long>> matmul(vector<vector<long>>& a, vector<vector<long>>& b){
        int m=a.size(), n=b[0].size(), l=a[0].size();
        vector<vector<long>> c(m, vector<long>(n, 0));
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                for(int k=0; k<l; k++){
                    c[i][j] = (c[i][j] + a[i][k] * b[k][j]) % 1000000007;
                }
            }
        }
        return c;
    }
    
    vector<vector<long>> pow(vector<vector<long>>& a, int n){
        vector<vector<long>> res{{1, 0}, {0, 1}};
        while(n>0){
            if(n&1) res = matmul(a, res);
            n >>= 1;
            a = matmul(a, a);
        }
        return res;
        
    }
    
    int fib(int n) {
        if(n<2) return n;
        vector<vector<long>> q{{1, 1}, {1, 0}};
        vector<vector<long>> res = pow(q, n-1);
        return res[0][0];
    }
    
};
    ###############################################
    1. 快速幂的写法
    2. 矩阵乘法的写法
    3. vector的初始化方法 vector<int> a{3, 7} 3个7
                         vector<int> a{3}    3个值，系统来初始化
                         vector<int> a{{1, 0}, {0, 1}}

