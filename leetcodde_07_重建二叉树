/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
private: unordered_map<int, int> index;
public:
    TreeNode* myBuildTree(const vector<int>& preorder, const vector<int> inorder, int preorder_left, int preorder_right, int inorder_left, int inorder_right){
        if(preorder_left > preorder_right){
            return nullptr;
        }
        int preorder_root = preorder_left;
        int inorder_root = index[preorder[preorder_root]];
        TreeNode* root = new TreeNode(preorder[preorder_root]);
        int size_left_tree = inorder_root - inorder_left;
        root->left = myBuildTree(preorder, inorder, preorder_left+1, preorder_left+size_left_tree, inorder_left, inorder_root-1);
        root->right = myBuildTree(preorder, inorder, preorder_left+1+size_left_tree, preorder_right, inorder_root+1, inorder_right);
        return root;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int len = inorder.size();
        for(int i=0; i<len; i++){
            index[inorder[i]] = i;
        }
        return myBuildTree(preorder, inorder, 0, len-1, 0, len-1);
    }
};

############################################################################################################################################
1. const vector<int>& inorder
