####################################方法一：回溯########################################################
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:

    void method(vector<int>& res, ListNode* head)
    {
        if(head == NULL) return;
        method(res, head->next);
        res.push_back(head->val);        
    }
    vector<int> reversePrint(ListNode* head) {
        vector<int> res;
        method(res, head);
        return res;
    }
};

1. vector本质上是一个可以动态管理内存的数组
2. vector<int>::iterator it = res.begin();


#######################################方法二：用栈#######################################################
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> reversePrint(ListNode* head) {
        stack<int> s;
        vector<int> res;
        ListNode* p = head;

        while(p != NULL)
        {
            s.push(p->val);
            p=p->next;
        }
        while(!s.empty())
        {
            int temp = s.top();
            res.push_back(temp);
            s.pop();
        }
        return res;

    }
};


1. stack : push(item)压入
            pop()弹出  无返回值
            top()返回栈顶元素
           
###################################方法三 vector.insert()#########################################
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> reversePrint(ListNode* head) {
        vector<int> res;
        ListNode* p = head;

        while(p != NULL)
        {
            res.insert(res.begin(), p->val);
            p = p->next;
        }
        return res;
    }
};

1. vector.insert(vector.begin(), val) 在向量头插入指定值
    vector.insert(vector.end(), val) 在向量尾插入指定值
